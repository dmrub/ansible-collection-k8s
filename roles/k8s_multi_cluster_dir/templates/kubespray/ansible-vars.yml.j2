{% macro non_empty_str_var(name, value) -%}
{% if value is defined and value is not none and (value | string | length > 0) -%}
{{ name }}: {{ value | to_json }}
{%- else -%}
# Variable {{ name }} is not defined
{%- endif %}
{%- endmacro %}
{% macro non_empty_list_var(name, value) -%}
{% if value is defined and value is not none and
      value is sequence and value is not string and
      value is not mapping
      and (value | list | length > 0) -%}
{{ name }}: {{ value | to_json }}
{%- else -%}
# Variable {{ name }} is not defined
{%- endif %}
{%- endmacro %}
# bootstrap_os: centos (automatic)
deploy_netchecker: true
dashboard_enabled: true
# cluster_monitoring_enabled: true # DEPRECATED
metrics_server_enabled: true
kubeconfig_localhost: true
kubectl_localhost: true
kube_network_plugin: calico
kube_basic_auth: true

# Required for Prometheus operator
# https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus
# When enabled, API bearer tokens (including service account tokens) can be used to authenticate to the kubeletâ€™s HTTPS endpoint
kubelet_authentication_token_webhook: true
# When enabled, access to the kubelet API requires authorization by delegation to the API server
kubelet_authorization_mode_webhook: true

{{ non_empty_str_var('kube_external_apiserver_address', kube_external_apiserver_address) }}
{{ non_empty_str_var('kube_external_apiserver_port', kube_external_apiserver_port) }}
{{ non_empty_str_var('cluster_name', cluster_name) }}

## External LB example config
## apiserver_loadbalancer_domain_name: "elb.some.domain"
# loadbalancer_apiserver:
#   address: 1.2.3.4
#   port: 1234

{{ non_empty_list_var('supplementary_addresses_in_ssl_keys', supplementary_addresses_in_ssl_keys) }}

# Calico configuration

calico_mtu: 1400

# Docker configuration

#docker_version: '17.09'
#docker_selinux_version: '17.09'

## Used to set docker daemon iptables options to true
docker_iptables_enabled: "true" # default: "false"
{%if is_kubespray_2_16_0 %}
{% raw %}
docker_insecure_registries: "{{ (groups['docker_registry'] | default([], true) | map('regex_replace', '^(.*)$', '\\1:' ~ (docker_registry_port|default('5000', true))) | list) }}"

# docker_options: "--insecure-registry={{ kube_service_addresses }} {% for item in docker_insecure_registries %} --insecure-registry={{item}} {% endfor %} --graph={{ docker_daemon_graph }} {{ docker_log_opts }} --iptables=true"
{% endraw %}
{% else %}
{% raw %}
docker_insecure_registries: "{{ (groups['docker-registry'] | default([], true) | map('regex_replace', '^(.*)$', '\\1:' ~ (docker_registry_port|default('5000', true))) | list) }}"

# docker_options: "--insecure-registry={{ kube_service_addresses }} {% for item in docker_insecure_registries %} --insecure-registry={{item}} {% endfor %} --graph={{ docker_daemon_graph }} {{ docker_log_opts }} --iptables=true"
{% endraw %}
{% endif %}

# Additional Kubernetes configuration

#kube_version: v1.18.10

#apiserver_custom_flags:
#  - "--max-requests-inflight=1500"

# Kube-proxy proxyMode configuration.
# Can be ipvs, iptables
kube_proxy_mode: iptables

system_namespace: kube-system

## The read-only port for the Kubelet to serve on with no authentication/authorization. Uncomment to enable.
kube_read_only_port: 10255

# https://blog.openai.com/scaling-kubernetes-to-2500-nodes/#dockerimagepulls
kubelet_custom_flags:
  - "--image-pull-progress-deadline=30m"

# Enable nodelocal dns cache
# Should be disabled for Ubuntu 20.04: https://github.com/kubernetes-sigs/kubespray/issues/5835#issuecomment-645901410
enable_nodelocaldns: false
{% if k8s_vars.extra_vars is defined %}
{{ k8s_vars.extra_vars | dict2items |
   rejectattr('key', 'equalto', 'kube_external_apiserver_address') |
   rejectattr('key', 'equalto', 'kube_external_apiserver_port') |
   rejectattr('key', 'equalto', 'cluster_name') |
   rejectattr('key', 'equalto', 'supplementary_addresses_in_ssl_keys') |
   list | items2dict |
   to_nice_yaml(width=10000)
}}
{%- endif %}

# Default netchecker is too old, use the latest version
netcheck_agent_image_repo: mirantis/k8s-netchecker-agent
netcheck_agent_image_tag: v1.2.2
netcheck_server_image_repo: mirantis/k8s-netchecker-server
netcheck_server_image_tag: v1.2.2

k8s_all_hosts: {{ 'k8s_cluster:etcd:calico_rr' if is_kubespray_2_16_0 else 'k8s-cluster:etcd:calico-rr' }}
k8s_all_masters: {{ 'kube_control_plane' if is_kubespray_2_16_0 else 'kube-master' }}
k8s_cluster_hosts: {{ 'k8s_cluster' if is_kubespray_2_16_0 else 'k8s-cluster' }}
